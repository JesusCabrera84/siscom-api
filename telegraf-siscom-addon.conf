# ============================================================================
# Configuración ADICIONAL para Telegraf - siscom-api
# ============================================================================
# INSTRUCCIONES:
# 1. AGREGAR este bloque a tu archivo telegraf.conf existente (NO reemplazar)
# 2. Mantén tu configuración actual intacta (puerto 8125 para otros proyectos)
# 3. Este bloque agrega soporte para siscom-api en puerto 8126
# ============================================================================

# ====================
# Input: StatsD para siscom-api en puerto 8126
# ====================
# NOTA: Este es un input ADICIONAL que no interfiere con tu [[inputs.statsd]]
#       existente en el puerto 8125
[[inputs.statsd]]
  # Puerto DIFERENTE (8126) para siscom-api
  # Tus otros proyectos siguen usando 8125
  service_address = ":8126"
  protocol = "udp"
  
  # Configuración para aio-statsd (formato InfluxDB)
  # Diferente a tu config actual que usa datadog_extensions = true
  metric_separator = "."
  datadog_extensions = false        # aio-statsd usa formato InfluxDB, no Datadog
  
  # Percentiles para análisis de latencias
  percentiles = [50, 90, 95, 99]
  
  # Buffers (mismos valores que tu config actual)
  allowed_pending_messages = 10000
  percentile_limit = 1000
  
  # Configuración de retención
  delete_gauges = false
  delete_counters = false
  delete_sets = false
  delete_timings = true              # Convertir timings a estadísticas (mean, p50, p90, etc)
  
  # Tag adicional para identificar el origen
  [inputs.statsd.tags]
    source = "siscom-api"

# ============================================================================
# FIN DE LA CONFIGURACIÓN ADICIONAL
# ============================================================================
# Después de este bloque, continúa con tu configuración actual:
# - [[inputs.tail]]
# - [[inputs.docker_log]]
# - [[processors.regex]]
# - [[outputs.influxdb_v2]]
# ============================================================================

# ============================================================================
# MÉTRICAS QUE RECIBIRÁS DE SISCOM-API
# ============================================================================
#
# En InfluxDB verás estas métricas con tag app=siscom-api y source=siscom-api:
#
# 1. siscom_api.requests
#    - Tipo: counter
#    - Descripción: Peticiones HTTP totales
#    - Usa derivative() para obtener peticiones/minuto
#
# 2. siscom_api.latency.stream.mean
#    siscom_api.latency.stream.median
#    siscom_api.latency.stream.p90
#    siscom_api.latency.stream.p95
#    siscom_api.latency.stream.p99
#    - Tipo: timing (convertido a estadísticas)
#    - Descripción: Latencia del endpoint /stream
#    - Valores en milisegundos
#
# 3. siscom_api.sse.active_connections
#    - Tipo: counter (usado como gauge)
#    - Descripción: Conexiones SSE activas
#    - Se incrementa/decrementa según conexiones
#
# ============================================================================
# VERIFICACIÓN
# ============================================================================
#
# Después de agregar este bloque y reiniciar Telegraf:
#
# 1. Verifica que Telegraf está escuchando en ambos puertos:
#    netstat -ulnp | grep telegraf
#    Deberías ver: *:8125 y *:8126
#
# 2. Prueba enviar una métrica:
#    echo "siscom_api.test,app=siscom-api:1|c" | nc -u -w1 localhost 8126
#
# 3. Verifica en InfluxDB:
#    influx query 'from(bucket:"siscom") 
#      |> range(start: -5m) 
#      |> filter(fn: (r) => r.source == "siscom-api")'
#
# ============================================================================

